[tool.poetry]
name = "SPINE"
version = "0.6.0"
description = "Simulation Processing & INteraction Engine"
authors = ["Mateusz Polis <polismateusz@gmail.com>"]
readme = "README.md"
packages = [{include = "agents"}, {include = "core"}, {include = "world"}]

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "^0.115.0"
uvicorn = {extras = ["standard"], version = "^0.32.0"}
pydantic = "^2.9.0"
orjson = "^3.10.0"
numpy = "^2.0.0"
networkx = "^3.3"
prometheus-client = "^0.21.0"
structlog = "^24.4.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.0"
pytest-asyncio = "^0.25.0"
pytest-benchmark = "^4.0.0"
mypy = "^1.11.0"
ruff = "^0.6.0"
pre-commit = "^3.8.0"
pytest-cov = "^5.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "B904",   # Allow raising exceptions without from e
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true

[[tool.mypy.overrides]]
module = "networkx.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "prometheus_client.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "asyncio: marks tests as async",
]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=agents",
    "--cov=core",
    "--cov=world",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["agents", "core", "world"]
omit = ["*/tests/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
